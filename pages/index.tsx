// import { auth, db } from './config'
import Head from 'next/head'
import React from 'react'

// Import the functions you need from the SDKs you need
import { setPersistence, signInWithEmailAndPassword, browserSessionPersistence, onAuthStateChanged } from "firebase/auth";
import { child, get } from "firebase/database";
import { auth, dbRef } from '@/common/config'

import PlantCard from '@/components/plantcard';

console.log(new Date().getTime() - new Date().getTime())

export default function Home() {
  const [loginState, setLoginState] = React.useState(false);
  const [plants, setPlants] = React.useState(Array());
  
  React.useEffect(() => {
    // Check if existing session login exists using Firebase Authentication API
    onAuthStateChanged( auth, (user) => {
      // If yes, set loginState to True to render the PlantCards
      if (user) {
        setLoginState(true);

        // Generate an array in which to place the data for the plants
        var tempPlants = Array();

        // Get the data from the database
        get(child(dbRef, `plants/`)).then((snapshot) => {
          if (snapshot.exists()) {
            // Loop through each plant and push data into tempPlants per plant
            for (const name in snapshot.val()) {
              var plant = snapshot.val()[name];
              plant.name = name;
              tempPlants.push(plant)
            }
            // Set the data to the final array to begin the refresh using React Hooks.
            setPlants(tempPlants);

          } else {
            // If snapshot.exists() returns false, the data is somehow not available.
            console.log("No data available");
          }
        }).catch((error) => {
          console.error(error);
        });

      // If no valid session is given, set loginState to false and show login screen
      } else {  
        setLoginState(false);
      }
    })

  }, [loginState])

  return (
    <div className="main">
    <Head>
      <title>Plant Checker</title>
      <meta name="description" content="Generated by create next app" />
      <meta name="viewport" content="width=device-width, initial-scale=1" />
      <link rel="icon" href="/favicon.ico" />
    </Head>
    {loginState ? (
      <div>
        <h1>Plant Checker v1.0.0</h1>
        <div>{plants.map((plant) => <PlantCard plantData={plant} key={plant.name}/>)}</div>
      </div>
      ) : (
        <LoginComponent loginState={false} setLoginState={setLoginState}/>
    )}
    </div>
  )
}

type loginComponentProps = {
  loginState: boolean;
  setLoginState: React.Dispatch<React.SetStateAction<boolean>>;
}

function LoginComponent(props: loginComponentProps) {
  const {loginState, setLoginState} = props;

  const [email, setEmail] = React.useState('');
  const [password, setPassword] = React.useState('');
  const [error, setError] = React.useState('');

  function handleLogin(event: Event) {
    event.preventDefault();
    setPersistence(auth, browserSessionPersistence)
    .then(() => {
      // Existing and future Auth states are now persisted in the current
      // session only. Closing the window would clear any existing state even
      // if a user forgets to sign out.
      // ...
      // New sign-in will be persisted with session persistence.
      return (
        signInWithEmailAndPassword(auth, email, password)
        .then(() => {
          setLoginState(true);
          setError('');
        })
        .catch((error) => {
          setLoginState(false);
          setError(error.message);
        })
      )
    })
    .catch((error) => {
      setError(error.message);
    });

  }
  if (!loginState) {
    return (
      <div className = "LoginScreen">
        <h1>Login</h1>
        <div>
          <form>
            <label>
              <p>E-mail</p>
              <input type="text" onChange={e => setEmail(e.target.value)}/>
            </label>
            <label>
              <p>Password</p>
              <input type="password" onChange={e => setPassword(e.target.value)}/>
            </label>
            
            <button type="submit" onClick={handleLogin}>Login</button>
          </form>
          <div>{error}</div>
        </div>
      </div>
    );
  }
  else {
    return <div/>
  }
};

