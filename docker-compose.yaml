version: "3.2"

services:
  plant-db:
    restart: always
    env_file: ./backend./.env.development
    container_name: ${DB_SERVICENAME}
    image: mariadb

    environment:
      - MYSQL_PORT=${DB_PORT}
      - MYSQL_DATABASE=${DB_NAME}
      - MYSQL_USER=${DB_USER}
      - MYSQL_PASSWORD=${DB_PASS}
      - MYSQL_HOST=${DB_SERVICENAME}
      - MYSQL_ROOT_HOST=${DB_ROOT_HOST}
      - MYSQL_ROOT_PASSWORD=${DB_ROOT_PASS}
    ports:
      - "3302:${DB_PORT}"
    networks:
      - plant-db-net
    volumes:
      - plant-db-volume:/var/lib/mysql

  plant-backend:
    restart: unless-stopped
    container_name: plant-backend
    command : bash -c "python check_db.py --service-name ${DB_SERVICENAME} --ip ${DB_SERVICENAME} --port ${DB_PORT} && 
                  python manage.py makemigrations &&
                  python manage.py migrate &&
                  python manage.py collectstatic --no-input &&
                  python manage.py runserver 0.0.0.0:8000"
    
    env_file:
      - ./backend/.env.development
    build:
      context: ./backend/
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    depends_on:
      - plant-db
    networks:
      - plant-db-net
    volumes:
      - ./backend/:/app/

  plant-frontend:
    restart: always
    container_name: plant-frontend
    command: npm start
    environment:
      CHOKIDAR_USEPOLLING: 'true'
    build:
      context: ./frontend/
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    stdin_open: true
    networks:
      - plant-db-net
    volumes:
      - ./frontend/:/app/
      - plant-node_modules:/app/node_modules


networks:
  plant-db-net:
    driver: bridge

volumes:
  plant-db-volume:
  plant-node_modules: